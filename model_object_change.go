/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ObjectChange struct for ObjectChange
type ObjectChange struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Display *string `json:"display,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	User *NestedUser `json:"user,omitempty"`
	UserName *string `json:"user_name,omitempty"`
	RequestId *string `json:"request_id,omitempty"`
	Action *Action `json:"action,omitempty"`
	ChangedObjectType *string `json:"changed_object_type,omitempty"`
	ChangedObjectId int32 `json:"changed_object_id"`
	//  Serialize a nested representation of the changed object. 
	ChangedObject *map[string]string `json:"changed_object,omitempty"`
	PrechangeData *string `json:"prechange_data,omitempty"`
	PostchangeData *string `json:"postchange_data,omitempty"`
}

// NewObjectChange instantiates a new ObjectChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectChange(changedObjectId int32) *ObjectChange {
	this := ObjectChange{}
	this.ChangedObjectId = changedObjectId
	return &this
}

// NewObjectChangeWithDefaults instantiates a new ObjectChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectChangeWithDefaults() *ObjectChange {
	this := ObjectChange{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObjectChange) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObjectChange) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ObjectChange) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ObjectChange) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ObjectChange) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ObjectChange) SetUrl(v string) {
	o.Url = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *ObjectChange) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *ObjectChange) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *ObjectChange) SetDisplay(v string) {
	o.Display = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ObjectChange) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ObjectChange) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *ObjectChange) SetTime(v time.Time) {
	o.Time = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ObjectChange) GetUser() NestedUser {
	if o == nil || o.User == nil {
		var ret NestedUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUserOk() (*NestedUser, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ObjectChange) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given NestedUser and assigns it to the User field.
func (o *ObjectChange) SetUser(v NestedUser) {
	o.User = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ObjectChange) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ObjectChange) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ObjectChange) SetUserName(v string) {
	o.UserName = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ObjectChange) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ObjectChange) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ObjectChange) SetRequestId(v string) {
	o.RequestId = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ObjectChange) GetAction() Action {
	if o == nil || o.Action == nil {
		var ret Action
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetActionOk() (*Action, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ObjectChange) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given Action and assigns it to the Action field.
func (o *ObjectChange) SetAction(v Action) {
	o.Action = &v
}

// GetChangedObjectType returns the ChangedObjectType field value if set, zero value otherwise.
func (o *ObjectChange) GetChangedObjectType() string {
	if o == nil || o.ChangedObjectType == nil {
		var ret string
		return ret
	}
	return *o.ChangedObjectType
}

// GetChangedObjectTypeOk returns a tuple with the ChangedObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangedObjectTypeOk() (*string, bool) {
	if o == nil || o.ChangedObjectType == nil {
		return nil, false
	}
	return o.ChangedObjectType, true
}

// HasChangedObjectType returns a boolean if a field has been set.
func (o *ObjectChange) HasChangedObjectType() bool {
	if o != nil && o.ChangedObjectType != nil {
		return true
	}

	return false
}

// SetChangedObjectType gets a reference to the given string and assigns it to the ChangedObjectType field.
func (o *ObjectChange) SetChangedObjectType(v string) {
	o.ChangedObjectType = &v
}

// GetChangedObjectId returns the ChangedObjectId field value
func (o *ObjectChange) GetChangedObjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChangedObjectId
}

// GetChangedObjectIdOk returns a tuple with the ChangedObjectId field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangedObjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedObjectId, true
}

// SetChangedObjectId sets field value
func (o *ObjectChange) SetChangedObjectId(v int32) {
	o.ChangedObjectId = v
}

// GetChangedObject returns the ChangedObject field value if set, zero value otherwise.
func (o *ObjectChange) GetChangedObject() map[string]string {
	if o == nil || o.ChangedObject == nil {
		var ret map[string]string
		return ret
	}
	return *o.ChangedObject
}

// GetChangedObjectOk returns a tuple with the ChangedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangedObjectOk() (*map[string]string, bool) {
	if o == nil || o.ChangedObject == nil {
		return nil, false
	}
	return o.ChangedObject, true
}

// HasChangedObject returns a boolean if a field has been set.
func (o *ObjectChange) HasChangedObject() bool {
	if o != nil && o.ChangedObject != nil {
		return true
	}

	return false
}

// SetChangedObject gets a reference to the given map[string]string and assigns it to the ChangedObject field.
func (o *ObjectChange) SetChangedObject(v map[string]string) {
	o.ChangedObject = &v
}

// GetPrechangeData returns the PrechangeData field value if set, zero value otherwise.
func (o *ObjectChange) GetPrechangeData() string {
	if o == nil || o.PrechangeData == nil {
		var ret string
		return ret
	}
	return *o.PrechangeData
}

// GetPrechangeDataOk returns a tuple with the PrechangeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetPrechangeDataOk() (*string, bool) {
	if o == nil || o.PrechangeData == nil {
		return nil, false
	}
	return o.PrechangeData, true
}

// HasPrechangeData returns a boolean if a field has been set.
func (o *ObjectChange) HasPrechangeData() bool {
	if o != nil && o.PrechangeData != nil {
		return true
	}

	return false
}

// SetPrechangeData gets a reference to the given string and assigns it to the PrechangeData field.
func (o *ObjectChange) SetPrechangeData(v string) {
	o.PrechangeData = &v
}

// GetPostchangeData returns the PostchangeData field value if set, zero value otherwise.
func (o *ObjectChange) GetPostchangeData() string {
	if o == nil || o.PostchangeData == nil {
		var ret string
		return ret
	}
	return *o.PostchangeData
}

// GetPostchangeDataOk returns a tuple with the PostchangeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetPostchangeDataOk() (*string, bool) {
	if o == nil || o.PostchangeData == nil {
		return nil, false
	}
	return o.PostchangeData, true
}

// HasPostchangeData returns a boolean if a field has been set.
func (o *ObjectChange) HasPostchangeData() bool {
	if o != nil && o.PostchangeData != nil {
		return true
	}

	return false
}

// SetPostchangeData gets a reference to the given string and assigns it to the PostchangeData field.
func (o *ObjectChange) SetPostchangeData(v string) {
	o.PostchangeData = &v
}

func (o ObjectChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserName != nil {
		toSerialize["user_name"] = o.UserName
	}
	if o.RequestId != nil {
		toSerialize["request_id"] = o.RequestId
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.ChangedObjectType != nil {
		toSerialize["changed_object_type"] = o.ChangedObjectType
	}
	if true {
		toSerialize["changed_object_id"] = o.ChangedObjectId
	}
	if o.ChangedObject != nil {
		toSerialize["changed_object"] = o.ChangedObject
	}
	if o.PrechangeData != nil {
		toSerialize["prechange_data"] = o.PrechangeData
	}
	if o.PostchangeData != nil {
		toSerialize["postchange_data"] = o.PostchangeData
	}
	return json.Marshal(toSerialize)
}

type NullableObjectChange struct {
	value *ObjectChange
	isSet bool
}

func (v NullableObjectChange) Get() *ObjectChange {
	return v.value
}

func (v *NullableObjectChange) Set(val *ObjectChange) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectChange) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectChange(val *ObjectChange) *NullableObjectChange {
	return &NullableObjectChange{value: val, isSet: true}
}

func (v NullableObjectChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


