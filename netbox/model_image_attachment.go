/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"time"
)

// ImageAttachment struct for ImageAttachment
type ImageAttachment struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Display *string `json:"display,omitempty"`
	ContentType string `json:"content_type"`
	ObjectId int32 `json:"object_id"`
	Parent *map[string]string `json:"parent,omitempty"`
	Name *string `json:"name,omitempty"`
	Image *string `json:"image,omitempty"`
	ImageHeight int32 `json:"image_height"`
	ImageWidth int32 `json:"image_width"`
	Created *time.Time `json:"created,omitempty"`
}

// NewImageAttachment instantiates a new ImageAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageAttachment(contentType string, objectId int32, imageHeight int32, imageWidth int32) *ImageAttachment {
	this := ImageAttachment{}
	this.ContentType = contentType
	this.ObjectId = objectId
	this.ImageHeight = imageHeight
	this.ImageWidth = imageWidth
	return &this
}

// NewImageAttachmentWithDefaults instantiates a new ImageAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageAttachmentWithDefaults() *ImageAttachment {
	this := ImageAttachment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImageAttachment) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImageAttachment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ImageAttachment) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ImageAttachment) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ImageAttachment) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ImageAttachment) SetUrl(v string) {
	o.Url = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *ImageAttachment) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *ImageAttachment) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *ImageAttachment) SetDisplay(v string) {
	o.Display = &v
}

// GetContentType returns the ContentType field value
func (o *ImageAttachment) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *ImageAttachment) SetContentType(v string) {
	o.ContentType = v
}

// GetObjectId returns the ObjectId field value
func (o *ImageAttachment) GetObjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetObjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *ImageAttachment) SetObjectId(v int32) {
	o.ObjectId = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ImageAttachment) GetParent() map[string]string {
	if o == nil || o.Parent == nil {
		var ret map[string]string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetParentOk() (*map[string]string, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ImageAttachment) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given map[string]string and assigns it to the Parent field.
func (o *ImageAttachment) SetParent(v map[string]string) {
	o.Parent = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImageAttachment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImageAttachment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImageAttachment) SetName(v string) {
	o.Name = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ImageAttachment) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ImageAttachment) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ImageAttachment) SetImage(v string) {
	o.Image = &v
}

// GetImageHeight returns the ImageHeight field value
func (o *ImageAttachment) GetImageHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ImageHeight
}

// GetImageHeightOk returns a tuple with the ImageHeight field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetImageHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageHeight, true
}

// SetImageHeight sets field value
func (o *ImageAttachment) SetImageHeight(v int32) {
	o.ImageHeight = v
}

// GetImageWidth returns the ImageWidth field value
func (o *ImageAttachment) GetImageWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ImageWidth
}

// GetImageWidthOk returns a tuple with the ImageWidth field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetImageWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageWidth, true
}

// SetImageWidth sets field value
func (o *ImageAttachment) SetImageWidth(v int32) {
	o.ImageWidth = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ImageAttachment) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ImageAttachment) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ImageAttachment) SetCreated(v time.Time) {
	o.Created = &v
}

func (o ImageAttachment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if true {
		toSerialize["content_type"] = o.ContentType
	}
	if true {
		toSerialize["object_id"] = o.ObjectId
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["image_height"] = o.ImageHeight
	}
	if true {
		toSerialize["image_width"] = o.ImageWidth
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullableImageAttachment struct {
	value *ImageAttachment
	isSet bool
}

func (v NullableImageAttachment) Get() *ImageAttachment {
	return v.value
}

func (v *NullableImageAttachment) Set(val *ImageAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableImageAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableImageAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageAttachment(val *ImageAttachment) *NullableImageAttachment {
	return &NullableImageAttachment{value: val, isSet: true}
}

func (v NullableImageAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


