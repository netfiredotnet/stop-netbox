/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// NestedSiteGroup struct for NestedSiteGroup
type NestedSiteGroup struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Display *string `json:"display,omitempty"`
	Name string `json:"name"`
	Slug string `json:"slug"`
	SiteCount *int32 `json:"site_count,omitempty"`
	Depth *int32 `json:"_depth,omitempty"`
}

// NewNestedSiteGroup instantiates a new NestedSiteGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedSiteGroup(name string, slug string) *NestedSiteGroup {
	this := NestedSiteGroup{}
	this.Name = name
	this.Slug = slug
	return &this
}

// NewNestedSiteGroupWithDefaults instantiates a new NestedSiteGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedSiteGroupWithDefaults() *NestedSiteGroup {
	this := NestedSiteGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NestedSiteGroup) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedSiteGroup) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NestedSiteGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *NestedSiteGroup) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NestedSiteGroup) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedSiteGroup) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NestedSiteGroup) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NestedSiteGroup) SetUrl(v string) {
	o.Url = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *NestedSiteGroup) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedSiteGroup) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *NestedSiteGroup) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *NestedSiteGroup) SetDisplay(v string) {
	o.Display = &v
}

// GetName returns the Name field value
func (o *NestedSiteGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NestedSiteGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NestedSiteGroup) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *NestedSiteGroup) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *NestedSiteGroup) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *NestedSiteGroup) SetSlug(v string) {
	o.Slug = v
}

// GetSiteCount returns the SiteCount field value if set, zero value otherwise.
func (o *NestedSiteGroup) GetSiteCount() int32 {
	if o == nil || o.SiteCount == nil {
		var ret int32
		return ret
	}
	return *o.SiteCount
}

// GetSiteCountOk returns a tuple with the SiteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedSiteGroup) GetSiteCountOk() (*int32, bool) {
	if o == nil || o.SiteCount == nil {
		return nil, false
	}
	return o.SiteCount, true
}

// HasSiteCount returns a boolean if a field has been set.
func (o *NestedSiteGroup) HasSiteCount() bool {
	if o != nil && o.SiteCount != nil {
		return true
	}

	return false
}

// SetSiteCount gets a reference to the given int32 and assigns it to the SiteCount field.
func (o *NestedSiteGroup) SetSiteCount(v int32) {
	o.SiteCount = &v
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *NestedSiteGroup) GetDepth() int32 {
	if o == nil || o.Depth == nil {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedSiteGroup) GetDepthOk() (*int32, bool) {
	if o == nil || o.Depth == nil {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *NestedSiteGroup) HasDepth() bool {
	if o != nil && o.Depth != nil {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *NestedSiteGroup) SetDepth(v int32) {
	o.Depth = &v
}

func (o NestedSiteGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["slug"] = o.Slug
	}
	if o.SiteCount != nil {
		toSerialize["site_count"] = o.SiteCount
	}
	if o.Depth != nil {
		toSerialize["_depth"] = o.Depth
	}
	return json.Marshal(toSerialize)
}

type NullableNestedSiteGroup struct {
	value *NestedSiteGroup
	isSet bool
}

func (v NullableNestedSiteGroup) Get() *NestedSiteGroup {
	return v.value
}

func (v *NullableNestedSiteGroup) Set(val *NestedSiteGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedSiteGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedSiteGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedSiteGroup(val *NestedSiteGroup) *NullableNestedSiteGroup {
	return &NullableNestedSiteGroup{value: val, isSet: true}
}

func (v NullableNestedSiteGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedSiteGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


