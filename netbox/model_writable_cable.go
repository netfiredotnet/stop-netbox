/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// WritableCable struct for WritableCable
type WritableCable struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Display *string `json:"display,omitempty"`
	TerminationAType string `json:"termination_a_type"`
	TerminationAId int32 `json:"termination_a_id"`
	TerminationA *map[string]string `json:"termination_a,omitempty"`
	TerminationBType string `json:"termination_b_type"`
	TerminationBId int32 `json:"termination_b_id"`
	TerminationB *map[string]string `json:"termination_b,omitempty"`
	Type *string `json:"type,omitempty"`
	Status *string `json:"status,omitempty"`
	Label *string `json:"label,omitempty"`
	Color *string `json:"color,omitempty"`
	Length NullableInt32 `json:"length,omitempty"`
	LengthUnit *string `json:"length_unit,omitempty"`
	Tags []NestedTag `json:"tags,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewWritableCable instantiates a new WritableCable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritableCable(terminationAType string, terminationAId int32, terminationBType string, terminationBId int32) *WritableCable {
	this := WritableCable{}
	this.TerminationAType = terminationAType
	this.TerminationAId = terminationAId
	this.TerminationBType = terminationBType
	this.TerminationBId = terminationBId
	return &this
}

// NewWritableCableWithDefaults instantiates a new WritableCable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritableCableWithDefaults() *WritableCable {
	this := WritableCable{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WritableCable) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WritableCable) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WritableCable) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *WritableCable) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *WritableCable) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *WritableCable) SetUrl(v string) {
	o.Url = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *WritableCable) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *WritableCable) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *WritableCable) SetDisplay(v string) {
	o.Display = &v
}

// GetTerminationAType returns the TerminationAType field value
func (o *WritableCable) GetTerminationAType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TerminationAType
}

// GetTerminationATypeOk returns a tuple with the TerminationAType field value
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTerminationATypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TerminationAType, true
}

// SetTerminationAType sets field value
func (o *WritableCable) SetTerminationAType(v string) {
	o.TerminationAType = v
}

// GetTerminationAId returns the TerminationAId field value
func (o *WritableCable) GetTerminationAId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TerminationAId
}

// GetTerminationAIdOk returns a tuple with the TerminationAId field value
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTerminationAIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TerminationAId, true
}

// SetTerminationAId sets field value
func (o *WritableCable) SetTerminationAId(v int32) {
	o.TerminationAId = v
}

// GetTerminationA returns the TerminationA field value if set, zero value otherwise.
func (o *WritableCable) GetTerminationA() map[string]string {
	if o == nil || o.TerminationA == nil {
		var ret map[string]string
		return ret
	}
	return *o.TerminationA
}

// GetTerminationAOk returns a tuple with the TerminationA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTerminationAOk() (*map[string]string, bool) {
	if o == nil || o.TerminationA == nil {
		return nil, false
	}
	return o.TerminationA, true
}

// HasTerminationA returns a boolean if a field has been set.
func (o *WritableCable) HasTerminationA() bool {
	if o != nil && o.TerminationA != nil {
		return true
	}

	return false
}

// SetTerminationA gets a reference to the given map[string]string and assigns it to the TerminationA field.
func (o *WritableCable) SetTerminationA(v map[string]string) {
	o.TerminationA = &v
}

// GetTerminationBType returns the TerminationBType field value
func (o *WritableCable) GetTerminationBType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TerminationBType
}

// GetTerminationBTypeOk returns a tuple with the TerminationBType field value
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTerminationBTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TerminationBType, true
}

// SetTerminationBType sets field value
func (o *WritableCable) SetTerminationBType(v string) {
	o.TerminationBType = v
}

// GetTerminationBId returns the TerminationBId field value
func (o *WritableCable) GetTerminationBId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TerminationBId
}

// GetTerminationBIdOk returns a tuple with the TerminationBId field value
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTerminationBIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TerminationBId, true
}

// SetTerminationBId sets field value
func (o *WritableCable) SetTerminationBId(v int32) {
	o.TerminationBId = v
}

// GetTerminationB returns the TerminationB field value if set, zero value otherwise.
func (o *WritableCable) GetTerminationB() map[string]string {
	if o == nil || o.TerminationB == nil {
		var ret map[string]string
		return ret
	}
	return *o.TerminationB
}

// GetTerminationBOk returns a tuple with the TerminationB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTerminationBOk() (*map[string]string, bool) {
	if o == nil || o.TerminationB == nil {
		return nil, false
	}
	return o.TerminationB, true
}

// HasTerminationB returns a boolean if a field has been set.
func (o *WritableCable) HasTerminationB() bool {
	if o != nil && o.TerminationB != nil {
		return true
	}

	return false
}

// SetTerminationB gets a reference to the given map[string]string and assigns it to the TerminationB field.
func (o *WritableCable) SetTerminationB(v map[string]string) {
	o.TerminationB = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WritableCable) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WritableCable) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WritableCable) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WritableCable) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WritableCable) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WritableCable) SetStatus(v string) {
	o.Status = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *WritableCable) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *WritableCable) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *WritableCable) SetLabel(v string) {
	o.Label = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *WritableCable) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *WritableCable) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *WritableCable) SetColor(v string) {
	o.Color = &v
}

// GetLength returns the Length field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableCable) GetLength() int32 {
	if o == nil || o.Length.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableCable) GetLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// HasLength returns a boolean if a field has been set.
func (o *WritableCable) HasLength() bool {
	if o != nil && o.Length.IsSet() {
		return true
	}

	return false
}

// SetLength gets a reference to the given NullableInt32 and assigns it to the Length field.
func (o *WritableCable) SetLength(v int32) {
	o.Length.Set(&v)
}
// SetLengthNil sets the value for Length to be an explicit nil
func (o *WritableCable) SetLengthNil() {
	o.Length.Set(nil)
}

// UnsetLength ensures that no value is present for Length, not even an explicit nil
func (o *WritableCable) UnsetLength() {
	o.Length.Unset()
}

// GetLengthUnit returns the LengthUnit field value if set, zero value otherwise.
func (o *WritableCable) GetLengthUnit() string {
	if o == nil || o.LengthUnit == nil {
		var ret string
		return ret
	}
	return *o.LengthUnit
}

// GetLengthUnitOk returns a tuple with the LengthUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetLengthUnitOk() (*string, bool) {
	if o == nil || o.LengthUnit == nil {
		return nil, false
	}
	return o.LengthUnit, true
}

// HasLengthUnit returns a boolean if a field has been set.
func (o *WritableCable) HasLengthUnit() bool {
	if o != nil && o.LengthUnit != nil {
		return true
	}

	return false
}

// SetLengthUnit gets a reference to the given string and assigns it to the LengthUnit field.
func (o *WritableCable) SetLengthUnit(v string) {
	o.LengthUnit = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WritableCable) GetTags() []NestedTag {
	if o == nil || o.Tags == nil {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WritableCable) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *WritableCable) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *WritableCable) GetCustomFields() map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableCable) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *WritableCable) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *WritableCable) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o WritableCable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if true {
		toSerialize["termination_a_type"] = o.TerminationAType
	}
	if true {
		toSerialize["termination_a_id"] = o.TerminationAId
	}
	if o.TerminationA != nil {
		toSerialize["termination_a"] = o.TerminationA
	}
	if true {
		toSerialize["termination_b_type"] = o.TerminationBType
	}
	if true {
		toSerialize["termination_b_id"] = o.TerminationBId
	}
	if o.TerminationB != nil {
		toSerialize["termination_b"] = o.TerminationB
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.Length.IsSet() {
		toSerialize["length"] = o.Length.Get()
	}
	if o.LengthUnit != nil {
		toSerialize["length_unit"] = o.LengthUnit
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return json.Marshal(toSerialize)
}

type NullableWritableCable struct {
	value *WritableCable
	isSet bool
}

func (v NullableWritableCable) Get() *WritableCable {
	return v.value
}

func (v *NullableWritableCable) Set(val *WritableCable) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableCable) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableCable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableCable(val *WritableCable) *NullableWritableCable {
	return &NullableWritableCable{value: val, isSet: true}
}

func (v NullableWritableCable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableCable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


