/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// PrefixLength struct for PrefixLength
type PrefixLength struct {
	PrefixLength int32 `json:"prefix_length"`
}

// NewPrefixLength instantiates a new PrefixLength object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrefixLength(prefixLength int32) *PrefixLength {
	this := PrefixLength{}
	this.PrefixLength = prefixLength
	return &this
}

// NewPrefixLengthWithDefaults instantiates a new PrefixLength object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrefixLengthWithDefaults() *PrefixLength {
	this := PrefixLength{}
	return &this
}

// GetPrefixLength returns the PrefixLength field value
func (o *PrefixLength) GetPrefixLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *PrefixLength) GetPrefixLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *PrefixLength) SetPrefixLength(v int32) {
	o.PrefixLength = v
}

func (o PrefixLength) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["prefix_length"] = o.PrefixLength
	}
	return json.Marshal(toSerialize)
}

type NullablePrefixLength struct {
	value *PrefixLength
	isSet bool
}

func (v NullablePrefixLength) Get() *PrefixLength {
	return v.value
}

func (v *NullablePrefixLength) Set(val *PrefixLength) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixLength) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixLength) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixLength(val *PrefixLength) *NullablePrefixLength {
	return &NullablePrefixLength{value: val, isSet: true}
}

func (v NullablePrefixLength) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixLength) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


