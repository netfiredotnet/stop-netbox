/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// Status8 struct for Status8
type Status8 struct {
	Label string `json:"label"`
	Value string `json:"value"`
}

// NewStatus8 instantiates a new Status8 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus8(label string, value string) *Status8 {
	this := Status8{}
	this.Label = label
	this.Value = value
	return &this
}

// NewStatus8WithDefaults instantiates a new Status8 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatus8WithDefaults() *Status8 {
	this := Status8{}
	return &this
}

// GetLabel returns the Label field value
func (o *Status8) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Status8) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Status8) SetLabel(v string) {
	o.Label = v
}

// GetValue returns the Value field value
func (o *Status8) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Status8) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Status8) SetValue(v string) {
	o.Value = v
}

func (o Status8) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableStatus8 struct {
	value *Status8
	isSet bool
}

func (v NullableStatus8) Get() *Status8 {
	return v.value
}

func (v *NullableStatus8) Set(val *Status8) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus8) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus8(val *Status8) *NullableStatus8 {
	return &NullableStatus8{value: val, isSet: true}
}

func (v NullableStatus8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


