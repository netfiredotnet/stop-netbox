/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// WritablePowerPanel struct for WritablePowerPanel
type WritablePowerPanel struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Display *string `json:"display,omitempty"`
	Site int32 `json:"site"`
	Location NullableInt32 `json:"location,omitempty"`
	Name string `json:"name"`
	Tags []NestedTag `json:"tags,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	PowerfeedCount *int32 `json:"powerfeed_count,omitempty"`
}

// NewWritablePowerPanel instantiates a new WritablePowerPanel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritablePowerPanel(site int32, name string) *WritablePowerPanel {
	this := WritablePowerPanel{}
	this.Site = site
	this.Name = name
	return &this
}

// NewWritablePowerPanelWithDefaults instantiates a new WritablePowerPanel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritablePowerPanelWithDefaults() *WritablePowerPanel {
	this := WritablePowerPanel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WritablePowerPanel) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WritablePowerPanel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WritablePowerPanel) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *WritablePowerPanel) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *WritablePowerPanel) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *WritablePowerPanel) SetUrl(v string) {
	o.Url = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *WritablePowerPanel) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *WritablePowerPanel) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *WritablePowerPanel) SetDisplay(v string) {
	o.Display = &v
}

// GetSite returns the Site field value
func (o *WritablePowerPanel) GetSite() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetSiteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Site, true
}

// SetSite sets field value
func (o *WritablePowerPanel) SetSite(v int32) {
	o.Site = v
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritablePowerPanel) GetLocation() int32 {
	if o == nil || o.Location.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritablePowerPanel) GetLocationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *WritablePowerPanel) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableInt32 and assigns it to the Location field.
func (o *WritablePowerPanel) SetLocation(v int32) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *WritablePowerPanel) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *WritablePowerPanel) UnsetLocation() {
	o.Location.Unset()
}

// GetName returns the Name field value
func (o *WritablePowerPanel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WritablePowerPanel) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WritablePowerPanel) GetTags() []NestedTag {
	if o == nil || o.Tags == nil {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WritablePowerPanel) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *WritablePowerPanel) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *WritablePowerPanel) GetCustomFields() map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *WritablePowerPanel) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *WritablePowerPanel) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetPowerfeedCount returns the PowerfeedCount field value if set, zero value otherwise.
func (o *WritablePowerPanel) GetPowerfeedCount() int32 {
	if o == nil || o.PowerfeedCount == nil {
		var ret int32
		return ret
	}
	return *o.PowerfeedCount
}

// GetPowerfeedCountOk returns a tuple with the PowerfeedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritablePowerPanel) GetPowerfeedCountOk() (*int32, bool) {
	if o == nil || o.PowerfeedCount == nil {
		return nil, false
	}
	return o.PowerfeedCount, true
}

// HasPowerfeedCount returns a boolean if a field has been set.
func (o *WritablePowerPanel) HasPowerfeedCount() bool {
	if o != nil && o.PowerfeedCount != nil {
		return true
	}

	return false
}

// SetPowerfeedCount gets a reference to the given int32 and assigns it to the PowerfeedCount field.
func (o *WritablePowerPanel) SetPowerfeedCount(v int32) {
	o.PowerfeedCount = &v
}

func (o WritablePowerPanel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if true {
		toSerialize["site"] = o.Site
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if o.PowerfeedCount != nil {
		toSerialize["powerfeed_count"] = o.PowerfeedCount
	}
	return json.Marshal(toSerialize)
}

type NullableWritablePowerPanel struct {
	value *WritablePowerPanel
	isSet bool
}

func (v NullableWritablePowerPanel) Get() *WritablePowerPanel {
	return v.value
}

func (v *NullableWritablePowerPanel) Set(val *WritablePowerPanel) {
	v.value = val
	v.isSet = true
}

func (v NullableWritablePowerPanel) IsSet() bool {
	return v.isSet
}

func (v *NullableWritablePowerPanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritablePowerPanel(val *WritablePowerPanel) *NullableWritablePowerPanel {
	return &NullableWritablePowerPanel{value: val, isSet: true}
}

func (v NullableWritablePowerPanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritablePowerPanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


