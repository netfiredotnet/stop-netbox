/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NestedPowerPort struct for NestedPowerPort
type NestedPowerPort struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Display *string `json:"display,omitempty"`
	Device *NestedDevice `json:"device,omitempty"`
	Name string `json:"name"`
	Cable NullableInt32 `json:"cable,omitempty"`
	Occupied *string `json:"_occupied,omitempty"`
}

// NewNestedPowerPort instantiates a new NestedPowerPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedPowerPort(name string) *NestedPowerPort {
	this := NestedPowerPort{}
	this.Name = name
	return &this
}

// NewNestedPowerPortWithDefaults instantiates a new NestedPowerPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedPowerPortWithDefaults() *NestedPowerPort {
	this := NestedPowerPort{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NestedPowerPort) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedPowerPort) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NestedPowerPort) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *NestedPowerPort) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NestedPowerPort) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedPowerPort) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NestedPowerPort) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NestedPowerPort) SetUrl(v string) {
	o.Url = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *NestedPowerPort) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedPowerPort) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *NestedPowerPort) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *NestedPowerPort) SetDisplay(v string) {
	o.Display = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *NestedPowerPort) GetDevice() NestedDevice {
	if o == nil || o.Device == nil {
		var ret NestedDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedPowerPort) GetDeviceOk() (*NestedDevice, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *NestedPowerPort) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given NestedDevice and assigns it to the Device field.
func (o *NestedPowerPort) SetDevice(v NestedDevice) {
	o.Device = &v
}

// GetName returns the Name field value
func (o *NestedPowerPort) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NestedPowerPort) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NestedPowerPort) SetName(v string) {
	o.Name = v
}

// GetCable returns the Cable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NestedPowerPort) GetCable() int32 {
	if o == nil || o.Cable.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Cable.Get()
}

// GetCableOk returns a tuple with the Cable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NestedPowerPort) GetCableOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cable.Get(), o.Cable.IsSet()
}

// HasCable returns a boolean if a field has been set.
func (o *NestedPowerPort) HasCable() bool {
	if o != nil && o.Cable.IsSet() {
		return true
	}

	return false
}

// SetCable gets a reference to the given NullableInt32 and assigns it to the Cable field.
func (o *NestedPowerPort) SetCable(v int32) {
	o.Cable.Set(&v)
}
// SetCableNil sets the value for Cable to be an explicit nil
func (o *NestedPowerPort) SetCableNil() {
	o.Cable.Set(nil)
}

// UnsetCable ensures that no value is present for Cable, not even an explicit nil
func (o *NestedPowerPort) UnsetCable() {
	o.Cable.Unset()
}

// GetOccupied returns the Occupied field value if set, zero value otherwise.
func (o *NestedPowerPort) GetOccupied() string {
	if o == nil || o.Occupied == nil {
		var ret string
		return ret
	}
	return *o.Occupied
}

// GetOccupiedOk returns a tuple with the Occupied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedPowerPort) GetOccupiedOk() (*string, bool) {
	if o == nil || o.Occupied == nil {
		return nil, false
	}
	return o.Occupied, true
}

// HasOccupied returns a boolean if a field has been set.
func (o *NestedPowerPort) HasOccupied() bool {
	if o != nil && o.Occupied != nil {
		return true
	}

	return false
}

// SetOccupied gets a reference to the given string and assigns it to the Occupied field.
func (o *NestedPowerPort) SetOccupied(v string) {
	o.Occupied = &v
}

func (o NestedPowerPort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Cable.IsSet() {
		toSerialize["cable"] = o.Cable.Get()
	}
	if o.Occupied != nil {
		toSerialize["_occupied"] = o.Occupied
	}
	return json.Marshal(toSerialize)
}

type NullableNestedPowerPort struct {
	value *NestedPowerPort
	isSet bool
}

func (v NullableNestedPowerPort) Get() *NestedPowerPort {
	return v.value
}

func (v *NullableNestedPowerPort) Set(val *NestedPowerPort) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedPowerPort) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedPowerPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedPowerPort(val *NestedPowerPort) *NullableNestedPowerPort {
	return &NullableNestedPowerPort{value: val, isSet: true}
}

func (v NullableNestedPowerPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedPowerPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


