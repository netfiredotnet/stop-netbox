/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Webhook struct for Webhook
type Webhook struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Display *string `json:"display,omitempty"`
	ContentTypes []string `json:"content_types"`
	Name string `json:"name"`
	// Call this webhook when a matching object is created.
	TypeCreate *bool `json:"type_create,omitempty"`
	// Call this webhook when a matching object is updated.
	TypeUpdate *bool `json:"type_update,omitempty"`
	// Call this webhook when a matching object is deleted.
	TypeDelete *bool `json:"type_delete,omitempty"`
	// A POST will be sent to this URL when the webhook is called.
	PayloadUrl string `json:"payload_url"`
	Enabled *bool `json:"enabled,omitempty"`
	HttpMethod *string `json:"http_method,omitempty"`
	// The complete list of official content types is available <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">here</a>.
	HttpContentType *string `json:"http_content_type,omitempty"`
	// User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is support with the same context as the request body (below).
	AdditionalHeaders *string `json:"additional_headers,omitempty"`
	// Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.
	BodyTemplate *string `json:"body_template,omitempty"`
	// When provided, the request will include a 'X-Hook-Signature' header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.
	Secret *string `json:"secret,omitempty"`
	// Enable SSL certificate verification. Disable with caution!
	SslVerification *bool `json:"ssl_verification,omitempty"`
	// The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.
	CaFilePath NullableString `json:"ca_file_path,omitempty"`
}

// NewWebhook instantiates a new Webhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhook(contentTypes []string, name string, payloadUrl string) *Webhook {
	this := Webhook{}
	this.ContentTypes = contentTypes
	this.Name = name
	var typeCreate bool = false
	this.TypeCreate = &typeCreate
	var typeUpdate bool = false
	this.TypeUpdate = &typeUpdate
	var typeDelete bool = false
	this.TypeDelete = &typeDelete
	this.PayloadUrl = payloadUrl
	return &this
}

// NewWebhookWithDefaults instantiates a new Webhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookWithDefaults() *Webhook {
	this := Webhook{}
	var typeCreate bool = false
	this.TypeCreate = &typeCreate
	var typeUpdate bool = false
	this.TypeUpdate = &typeUpdate
	var typeDelete bool = false
	this.TypeDelete = &typeDelete
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Webhook) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Webhook) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Webhook) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Webhook) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Webhook) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Webhook) SetUrl(v string) {
	o.Url = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *Webhook) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *Webhook) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *Webhook) SetDisplay(v string) {
	o.Display = &v
}

// GetContentTypes returns the ContentTypes field value
func (o *Webhook) GetContentTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ContentTypes
}

// GetContentTypesOk returns a tuple with the ContentTypes field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetContentTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentTypes, true
}

// SetContentTypes sets field value
func (o *Webhook) SetContentTypes(v []string) {
	o.ContentTypes = v
}

// GetName returns the Name field value
func (o *Webhook) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Webhook) SetName(v string) {
	o.Name = v
}

// GetTypeCreate returns the TypeCreate field value if set, zero value otherwise.
func (o *Webhook) GetTypeCreate() bool {
	if o == nil || o.TypeCreate == nil {
		var ret bool
		return ret
	}
	return *o.TypeCreate
}

// GetTypeCreateOk returns a tuple with the TypeCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetTypeCreateOk() (*bool, bool) {
	if o == nil || o.TypeCreate == nil {
		return nil, false
	}
	return o.TypeCreate, true
}

// HasTypeCreate returns a boolean if a field has been set.
func (o *Webhook) HasTypeCreate() bool {
	if o != nil && o.TypeCreate != nil {
		return true
	}

	return false
}

// SetTypeCreate gets a reference to the given bool and assigns it to the TypeCreate field.
func (o *Webhook) SetTypeCreate(v bool) {
	o.TypeCreate = &v
}

// GetTypeUpdate returns the TypeUpdate field value if set, zero value otherwise.
func (o *Webhook) GetTypeUpdate() bool {
	if o == nil || o.TypeUpdate == nil {
		var ret bool
		return ret
	}
	return *o.TypeUpdate
}

// GetTypeUpdateOk returns a tuple with the TypeUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetTypeUpdateOk() (*bool, bool) {
	if o == nil || o.TypeUpdate == nil {
		return nil, false
	}
	return o.TypeUpdate, true
}

// HasTypeUpdate returns a boolean if a field has been set.
func (o *Webhook) HasTypeUpdate() bool {
	if o != nil && o.TypeUpdate != nil {
		return true
	}

	return false
}

// SetTypeUpdate gets a reference to the given bool and assigns it to the TypeUpdate field.
func (o *Webhook) SetTypeUpdate(v bool) {
	o.TypeUpdate = &v
}

// GetTypeDelete returns the TypeDelete field value if set, zero value otherwise.
func (o *Webhook) GetTypeDelete() bool {
	if o == nil || o.TypeDelete == nil {
		var ret bool
		return ret
	}
	return *o.TypeDelete
}

// GetTypeDeleteOk returns a tuple with the TypeDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetTypeDeleteOk() (*bool, bool) {
	if o == nil || o.TypeDelete == nil {
		return nil, false
	}
	return o.TypeDelete, true
}

// HasTypeDelete returns a boolean if a field has been set.
func (o *Webhook) HasTypeDelete() bool {
	if o != nil && o.TypeDelete != nil {
		return true
	}

	return false
}

// SetTypeDelete gets a reference to the given bool and assigns it to the TypeDelete field.
func (o *Webhook) SetTypeDelete(v bool) {
	o.TypeDelete = &v
}

// GetPayloadUrl returns the PayloadUrl field value
func (o *Webhook) GetPayloadUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayloadUrl
}

// GetPayloadUrlOk returns a tuple with the PayloadUrl field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetPayloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayloadUrl, true
}

// SetPayloadUrl sets field value
func (o *Webhook) SetPayloadUrl(v string) {
	o.PayloadUrl = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Webhook) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Webhook) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Webhook) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *Webhook) GetHttpMethod() string {
	if o == nil || o.HttpMethod == nil {
		var ret string
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetHttpMethodOk() (*string, bool) {
	if o == nil || o.HttpMethod == nil {
		return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *Webhook) HasHttpMethod() bool {
	if o != nil && o.HttpMethod != nil {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given string and assigns it to the HttpMethod field.
func (o *Webhook) SetHttpMethod(v string) {
	o.HttpMethod = &v
}

// GetHttpContentType returns the HttpContentType field value if set, zero value otherwise.
func (o *Webhook) GetHttpContentType() string {
	if o == nil || o.HttpContentType == nil {
		var ret string
		return ret
	}
	return *o.HttpContentType
}

// GetHttpContentTypeOk returns a tuple with the HttpContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetHttpContentTypeOk() (*string, bool) {
	if o == nil || o.HttpContentType == nil {
		return nil, false
	}
	return o.HttpContentType, true
}

// HasHttpContentType returns a boolean if a field has been set.
func (o *Webhook) HasHttpContentType() bool {
	if o != nil && o.HttpContentType != nil {
		return true
	}

	return false
}

// SetHttpContentType gets a reference to the given string and assigns it to the HttpContentType field.
func (o *Webhook) SetHttpContentType(v string) {
	o.HttpContentType = &v
}

// GetAdditionalHeaders returns the AdditionalHeaders field value if set, zero value otherwise.
func (o *Webhook) GetAdditionalHeaders() string {
	if o == nil || o.AdditionalHeaders == nil {
		var ret string
		return ret
	}
	return *o.AdditionalHeaders
}

// GetAdditionalHeadersOk returns a tuple with the AdditionalHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetAdditionalHeadersOk() (*string, bool) {
	if o == nil || o.AdditionalHeaders == nil {
		return nil, false
	}
	return o.AdditionalHeaders, true
}

// HasAdditionalHeaders returns a boolean if a field has been set.
func (o *Webhook) HasAdditionalHeaders() bool {
	if o != nil && o.AdditionalHeaders != nil {
		return true
	}

	return false
}

// SetAdditionalHeaders gets a reference to the given string and assigns it to the AdditionalHeaders field.
func (o *Webhook) SetAdditionalHeaders(v string) {
	o.AdditionalHeaders = &v
}

// GetBodyTemplate returns the BodyTemplate field value if set, zero value otherwise.
func (o *Webhook) GetBodyTemplate() string {
	if o == nil || o.BodyTemplate == nil {
		var ret string
		return ret
	}
	return *o.BodyTemplate
}

// GetBodyTemplateOk returns a tuple with the BodyTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetBodyTemplateOk() (*string, bool) {
	if o == nil || o.BodyTemplate == nil {
		return nil, false
	}
	return o.BodyTemplate, true
}

// HasBodyTemplate returns a boolean if a field has been set.
func (o *Webhook) HasBodyTemplate() bool {
	if o != nil && o.BodyTemplate != nil {
		return true
	}

	return false
}

// SetBodyTemplate gets a reference to the given string and assigns it to the BodyTemplate field.
func (o *Webhook) SetBodyTemplate(v string) {
	o.BodyTemplate = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *Webhook) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *Webhook) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *Webhook) SetSecret(v string) {
	o.Secret = &v
}

// GetSslVerification returns the SslVerification field value if set, zero value otherwise.
func (o *Webhook) GetSslVerification() bool {
	if o == nil || o.SslVerification == nil {
		var ret bool
		return ret
	}
	return *o.SslVerification
}

// GetSslVerificationOk returns a tuple with the SslVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetSslVerificationOk() (*bool, bool) {
	if o == nil || o.SslVerification == nil {
		return nil, false
	}
	return o.SslVerification, true
}

// HasSslVerification returns a boolean if a field has been set.
func (o *Webhook) HasSslVerification() bool {
	if o != nil && o.SslVerification != nil {
		return true
	}

	return false
}

// SetSslVerification gets a reference to the given bool and assigns it to the SslVerification field.
func (o *Webhook) SetSslVerification(v bool) {
	o.SslVerification = &v
}

// GetCaFilePath returns the CaFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Webhook) GetCaFilePath() string {
	if o == nil || o.CaFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.CaFilePath.Get()
}

// GetCaFilePathOk returns a tuple with the CaFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Webhook) GetCaFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaFilePath.Get(), o.CaFilePath.IsSet()
}

// HasCaFilePath returns a boolean if a field has been set.
func (o *Webhook) HasCaFilePath() bool {
	if o != nil && o.CaFilePath.IsSet() {
		return true
	}

	return false
}

// SetCaFilePath gets a reference to the given NullableString and assigns it to the CaFilePath field.
func (o *Webhook) SetCaFilePath(v string) {
	o.CaFilePath.Set(&v)
}
// SetCaFilePathNil sets the value for CaFilePath to be an explicit nil
func (o *Webhook) SetCaFilePathNil() {
	o.CaFilePath.Set(nil)
}

// UnsetCaFilePath ensures that no value is present for CaFilePath, not even an explicit nil
func (o *Webhook) UnsetCaFilePath() {
	o.CaFilePath.Unset()
}

func (o Webhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if true {
		toSerialize["content_types"] = o.ContentTypes
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.TypeCreate != nil {
		toSerialize["type_create"] = o.TypeCreate
	}
	if o.TypeUpdate != nil {
		toSerialize["type_update"] = o.TypeUpdate
	}
	if o.TypeDelete != nil {
		toSerialize["type_delete"] = o.TypeDelete
	}
	if true {
		toSerialize["payload_url"] = o.PayloadUrl
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.HttpMethod != nil {
		toSerialize["http_method"] = o.HttpMethod
	}
	if o.HttpContentType != nil {
		toSerialize["http_content_type"] = o.HttpContentType
	}
	if o.AdditionalHeaders != nil {
		toSerialize["additional_headers"] = o.AdditionalHeaders
	}
	if o.BodyTemplate != nil {
		toSerialize["body_template"] = o.BodyTemplate
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.SslVerification != nil {
		toSerialize["ssl_verification"] = o.SslVerification
	}
	if o.CaFilePath.IsSet() {
		toSerialize["ca_file_path"] = o.CaFilePath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableWebhook struct {
	value *Webhook
	isSet bool
}

func (v NullableWebhook) Get() *Webhook {
	return v.value
}

func (v *NullableWebhook) Set(val *Webhook) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhook(val *Webhook) *NullableWebhook {
	return &NullableWebhook{value: val, isSet: true}
}

func (v NullableWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


