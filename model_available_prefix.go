/*
NetBox API

API to access NetBox

API version: 2.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AvailablePrefix struct for AvailablePrefix
type AvailablePrefix struct {
	Family *int32 `json:"family,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	Vrf NullableNestedVRF `json:"vrf,omitempty"`
}

// NewAvailablePrefix instantiates a new AvailablePrefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailablePrefix() *AvailablePrefix {
	this := AvailablePrefix{}
	return &this
}

// NewAvailablePrefixWithDefaults instantiates a new AvailablePrefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailablePrefixWithDefaults() *AvailablePrefix {
	this := AvailablePrefix{}
	return &this
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *AvailablePrefix) GetFamily() int32 {
	if o == nil || o.Family == nil {
		var ret int32
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePrefix) GetFamilyOk() (*int32, bool) {
	if o == nil || o.Family == nil {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *AvailablePrefix) HasFamily() bool {
	if o != nil && o.Family != nil {
		return true
	}

	return false
}

// SetFamily gets a reference to the given int32 and assigns it to the Family field.
func (o *AvailablePrefix) SetFamily(v int32) {
	o.Family = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *AvailablePrefix) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePrefix) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *AvailablePrefix) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *AvailablePrefix) SetPrefix(v string) {
	o.Prefix = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePrefix) GetVrf() NestedVRF {
	if o == nil || o.Vrf.Get() == nil {
		var ret NestedVRF
		return ret
	}
	return *o.Vrf.Get()
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePrefix) GetVrfOk() (*NestedVRF, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vrf.Get(), o.Vrf.IsSet()
}

// HasVrf returns a boolean if a field has been set.
func (o *AvailablePrefix) HasVrf() bool {
	if o != nil && o.Vrf.IsSet() {
		return true
	}

	return false
}

// SetVrf gets a reference to the given NullableNestedVRF and assigns it to the Vrf field.
func (o *AvailablePrefix) SetVrf(v NestedVRF) {
	o.Vrf.Set(&v)
}
// SetVrfNil sets the value for Vrf to be an explicit nil
func (o *AvailablePrefix) SetVrfNil() {
	o.Vrf.Set(nil)
}

// UnsetVrf ensures that no value is present for Vrf, not even an explicit nil
func (o *AvailablePrefix) UnsetVrf() {
	o.Vrf.Unset()
}

func (o AvailablePrefix) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Family != nil {
		toSerialize["family"] = o.Family
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	if o.Vrf.IsSet() {
		toSerialize["vrf"] = o.Vrf.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAvailablePrefix struct {
	value *AvailablePrefix
	isSet bool
}

func (v NullableAvailablePrefix) Get() *AvailablePrefix {
	return v.value
}

func (v *NullableAvailablePrefix) Set(val *AvailablePrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailablePrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailablePrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailablePrefix(val *AvailablePrefix) *NullableAvailablePrefix {
	return &NullableAvailablePrefix{value: val, isSet: true}
}

func (v NullableAvailablePrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailablePrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


